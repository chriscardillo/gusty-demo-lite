description: "Here's everything gusty does"
schedule_interval: "0 0 * * *"
tags:
  - all_gusty_features
default_args:
    owner: gusty
    depends_on_past: False
    start_date: !days_ago 1
    email: gusty@gusty.com
    email_on_failure: False
    email_on_retry: False
    retries: 1
    retry_delay: !timedelta 'minutes: 5'
    sla: !timedelta 'hours: 2'
latest_only: True
external_dependencies:
  - airflow_tutorial: print_date
  - gusty_tutorial: all
root_tasks:
  - some_sensor
doc_md: |-
  The DAG below does a pretty good job of showing gusty's core strength: configuring DAGs for you, so you can focus on the tasks instead.

  Here are the main features illustrated in both this DAG's directory (of YAML specs) and how these specs render below:

  **Everything can be specified as YAML**


    - DAGs and task groups can use a file titled `METADATA.yml` to specify parameter available to either a DAG or a task group. Anything specified in `METADATA.yml` will override defaults set in gusty's `create_dag` function.
    - Tasks use the `operator` parameter to specify which operator gusty should use, and then any other parameter that can be specified to that operator can be added to the YAML.
    - For each task, dependencies within the same DAG can listed under `dependencies` in the task YAML.
    - External dependencies for dependencies located outside the same DAG can be listed using the format `dag_id: task_id`, or `dag_id: all` to depend on an entire other DAG.
    - All DAGs, task groups, and tasks are named after their folder or file names.
    - gusty also accepts YAML front matter in `.ipynb` and `.Rmd` files.


  **Defaults can be specified in `create_dag`**


    - gusty's `create_dag` function accepts any keyword argument that can be passed to Airflow's DAG class, so you can create a DAG without having to use `METADATA.yml`.
    - gusty's `create_dag` function also accepts a dictionary of task group parameters under `task_group_defaults`.
    - When you specify an external dependency, gusty creates an ExternalTaskSensor, whose parameters can be adjusted under the `wait_for_defaults` argument of `create_dag`.


  **DAG-level features (which can be placed either in `create_dag` or a `METADATA.yml` file)**

    - `latest_only` - A boolean that will tell gusty to ensure the entire DAG does not run tasks during catchup runs. This is enabled by default.
    - `external_dependencies` - Specify external dependencies on the DAG level, using the same format described above. Note that if you specify external dependencies in a call to `create_dag`, you use the format `[{'dag_id': 'task_id'}]`.
    - `root_tasks` - Specify task ids that should be placed at the root of your DAG, like an S3 sensor.


  **Task Group features**

    - To create a task group, all you have to do is put some YAML specifications in a subdirectory of the DAG's directory.
    - `suffix_group_id` - In addition to `prefix_group_id`, which is an Airflow task group option for adding the task group id to the front of your task id, you can suffix instead.
    - `prefix_group_id` is set to `False` by default, because task names should be explicitly set unless you specify otherwise.


  **Note shown here but also very useful**

    - gusty supports custom operators, using the `local` keyword when specifying an operator, e.g. `operator: local.your_custom_operator_here`. gusty will look for these operators in an `operators` directory within your `AIRFLOW_HOME`.
    - gusty will also pick up dependencies you specify in your operator, so you can auto-detect dependencies in a SQL query and pass them along, then gusty will set these dependencies
    - gusty also carries a `file_path` attribute, which you can use to, for example, render a Jupyter Notebook
